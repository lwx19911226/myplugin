#ifndef MYOBJ_H
#define MYOBJ_H

#include <QObject>
#include <QMetaType>
#include <QMetaEnum>
#include <QString>
#include <QList>
#include <QStringList>
#include <QStringListIterator>
#include <QTextStream>
#include <QFile>
#include <QTextCodec>
#include <QMessageBox>
#include <QFileDialog>
#include <QtGlobal>
#include <QDebug>


class myobj : public QObject
{
    Q_OBJECT
    Q_ENUMS(objType)
    Q_ENUMS(iniFormat)
public:
    explicit myobj(QObject *parent = 0):QObject(parent){
        blockstr="";noDeclaration=false;isVerified=false;isGlobal=false;
        //isDynamic=true;        
    }
    enum objType{all=0,myplayer=1,mysplayer=2,mycard=3,mybool=4,mylist=5,myplayerlist=6,mysplayerlist=7,mycardlist=8,mynumlist=9,mynum=10,mystr=11,mystrc=12};
    enum iniFormat{Name=0,Type=1,Remark=2,Extra=3};
    static QString enumstr(const QMetaObject *mob,QByteArray getname,int getint);
    static int enumint(const QMetaObject *mob,QByteArray getname,QString getstr,int defaultint=-1);
    static QStringList enumstrlist(const QMetaObject *mob,QByteArray getname);
    static void enumintlist(const QMetaObject *mob,QByteArray getname,QList<int> &list);
    static bool enumcontains(const QMetaObject *mob,QByteArray getname,QString getstr);
    static bool enumcontains(const QMetaObject *mob,QByteArray getname,int getint);
    static int enumcnt(const QMetaObject *mob,QByteArray getname);

    QString name;
    int type;
    QString remark;
    QString blockstr;
    bool noDeclaration;
    //bool isDynamic;//generated by function
    bool isVerified;
    bool isGlobal;
    static QStringList myconstlist;
    static QStringList myconsttaglist;
    static QStringList myconstskstrlist;

    virtual bool matchType(int gettype){        
        return isSubtype(gettype,type) or (name=="nil");
    }
    virtual bool matchBlock(QString getstr){
        return (blockstr=="") or (blockstr==getstr);
    }    
    static QString type2str(int gettype){return enumstr(&staticMetaObject,"objType",gettype);}
    static int str2type(QString getstr){
        /*
        if(getstr.startsWith(type2str(Mylist))){return Mylist;}
        if(getstr.startsWith(type2str(Mysplayerlist))){return Mysplayerlist;}
        if(getstr.startsWith(type2str(Mycardlist))){return Mycardlist;}
        if(getstr.startsWith(type2str(Mynumlist))){return Mynumlist;}
        if(getstr.startsWith(type2str(Myplayer))){return Myplayer;}
        if(getstr.startsWith(type2str(Mysplayer))){return Mysplayer;}
        if(getstr.startsWith(type2str(Mycard))){return Mycard;}
        if(getstr.startsWith(type2str(Mynum))){return Mynum;}
        if(getstr.startsWith(type2str(Mystrc))){return Mystrc;}
        if(getstr.startsWith(type2str(Mystr))){return Mystr;}
        if(getstr.startsWith(type2str(Mybool))){return Mybool;}
        if(getstr.startsWith(type2str(All))){return All;}
        qWarning()<<"OBJstr2type:"<<getstr;
        return All;
        */
        QMetaEnum myenum=staticMetaObject.enumerator(staticMetaObject.indexOfEnumerator("objType"));
        QString str="";
        int ii=-1;
        for(int i=0;i<myenum.keyCount();i++){
            QString tstr(myenum.key(i));
            if(getstr.startsWith(tstr)&&(tstr.length()>str.length())){str=tstr;ii=i;}
        }
        return myenum.value(ii);
    }
    static bool b4input(int &gettype){
        if(gettype==mystr){gettype=mystrc;}
        return isSubtype(mynum,gettype)||isSubtype(mystr,gettype);
    }    
    static bool isSubtype(int gettype0,int gettype){
        if(gettype0==all){return true;}
        if(gettype0==mylist){
            if(gettype==mysplayerlist){return true;}
            if(gettype==mycardlist){return true;}
            if(gettype==mynumlist){return true;}
        }
        if(gettype0==myplayerlist){
            if(gettype==mysplayerlist){return true;}
        }
        if(gettype0==myplayer){
            if(gettype==mysplayer){return true;}
        }
        if(gettype0==mystr){
            if(gettype==mystrc){return true;}
        }
        return (gettype0==gettype);
    }
    static QString gettypestr(QString getstr){
        QString typestr=type2str(str2type(getstr));
        if(getstr.startsWith(typestr)){return typestr;}
        qWarning()<<"typestr"<<getstr;
        return QString();
    }
    static QString gettypesuffix(QString getstr){
        QString typestr=gettypestr(getstr);
        if(getstr.startsWith(typestr)){return getstr.mid(typestr.length());}
        qWarning()<<"typesuffix"<<getstr;
        return QString();
    }
    static QString suitstr(QString getstr){
        if(getstr.contains("Spade")){return "spade";}
        if(getstr.contains("Club")){return "club";}
        if(getstr.contains("Heart")){return "heart";}
        if(getstr.contains("Diamond")){return "diamond";}
        return getstr;
    }
    static QString num2str(int getnum){
        if(getnum<1||getnum>13){return "-";}
        else if(getnum==10){return "10";}
        else{
            return QString(QByteArray("-A23456789-JQK").at(getnum));
        }
    }
    static QString objname_nullification(){return "nullification";}
    static QString objname_skillcard(){return "SkillCard";}

    QString trans(){
        if(type==mystrc){return "\""+name+"\"";}
        return name;
    }
    static QString trans4notnil(int gettype,QString tstr){
        switch(gettype){
        case myplayer:
        case mysplayer:
        case mycard:
            return QString("if not %1 then return defaultReturn end").arg(tstr);
        default:return QString();
        }
    }

    static void myini(int getqsv);
    static void myini_lang(int getqsv);
    static void myini_cl(int getqsv);
    static void iniwarning();
    //static QString isConst(QString getstr,QString abbstr);
    static QStringList transConst(QString getname,QString abbstr,int getqsv);
    static QStringList transconst_str(QString getconststr);
    static bool needtransconst_str(QString getconststr);
    static void newConst(QList<myobj *> &list,QObject *getpf,int getqsv,QString abbstr,bool only);
    static QStringList getconstlist_tag(int getqsv,QString gettag);
    static QStringList getconstrmlist_tag(int getqsv, QString gettag);
    static QStringList getconsttaglist();
    static QString name2str(QString getname,int getqsv, QString abbstr);
    static QString getblabb_str(QString getstr);
    static QString remark2name(QString);
    static QString name2remark(QString, int getqsv, QString abbstr);
    static QString remark2tag(QString);
    static bool matchtag_str(QString getstr,QString gettag);
    static bool matchqsv_str(QString getstr,int getqsv);
    static bool matchqsv0_str(QString getstr);
    static bool matchblabb_str(QString getstr,QString abbstr,bool only);
    static QString objname_default();
    static QString ptname_default();
    static QString skname_default();
    static bool mycmp(const QString &s1,const QString &s2){
        return s1.split("|").first().toLower()<s2.split("|").first().toLower();
    }
signals:
    
public slots:
    
};

#endif // MYOBJ_H
