//myevent
//comments start with //
//events start with >
//6 parts, split by |
//1. name
//2~5. something about const data
//2. types, split by comma
//3. names, split by comma
//4. remarks, split by comma(EN)
//5. translation, start&&end split by ;;, mod -> \%, \n -> ; 
//6. remark

>GameStart|||||时机触发者的游戏开始时
>TurnStart|||||时机触发者的回合开始时
>EventPhaseStart|mynum|phase|时机触发者当前阶段|local phase=player:getPhase()|时机触发者的阶段开始，返回值为真将跳过当前阶段
//>EventPhaseProceeding
//>EventPhaseEnd
//>EventPhaseChanging
>DrawNCards|mynum|drawnum|摸牌阶段摸牌数|local drawnum=data:toInt();;data:setValue(drawnum);return false|时机触发者摸牌阶段摸X张牌
//>AfterDrawNCards
>PreHpRecover|mynum,mysplayer,mycard|rcv.recover,rcv.who,rcv.card|回复体力数,回复来源,回复牌|local rcv=data:toRecover();;data:setValue(rcv);return false|时机触发者将回复体力时，返回值为真将取消这次回复
>HpRecover|mynum,mysplayer,mycard|rcv.recover,rcv.who,rcv.card|回复体力数,回复来源,回复牌|local rcv=data:toRecover()|时机触发者回复体力时
>PreHpLost|mynum|lostnum|失去体力数|local lostnum=data:toInt();;data:setValue(lostnum);return false|时机触发者将失去体力时，返回值为真将取消这次失去
>HpChanged|||||时机触发者体力发生变动时
>MaxHpChanged|||||时机触发者体力上限发生变动时
>PostHpReduced|mybool,mysplayer,mycard,mynum,mynum,mynum|isDamage,damageFrom,damageCard,damageNum,damageNature,lostNum|是否由伤害造成（否则为体力流失）,伤害来源（前提是伤害）,伤害牌（前提是伤害）,伤害点数（前提是伤害）,伤害属性（前提是伤害）,体力流失点数（前提是体力流失）|local dmg=data:toDamage();local isDamage=(dmg.to~=nil);local damageFrom,damageCard,damageNum,damageNature,lostNum;if isDamage then damageFrom,damageCard,damageNum,damageNature=dmg.from,dmg.card,dmg.damage,dmg.nature;else lostNum=data:toInt() end|时机触发者体力减少后，涉及伤害时请先判断是否由伤害造成（否则为体力流失）
>EventLoseSkill|mystr|skname|所失去技能名|local skname=data:toString()|时机触发者失去技能时
>EventAcquireSkill|mystr|skname|所获得技能名|local skname=data:toString()|时机触发者获得技能时
>StartJudge|mysplayer,mycard|judge.who,judge.card|判定者,判定牌|local judge=data:toJudge()|时机触发者将开始判定时
>AskForRetrial|mysplayer,mycard|judge.who,judge.card|判定者,判定牌|local judge=data:toJudge();;data:setValue(judge);return false|改判轮询时，时机触发者为被询问者，返回值为真将中止继续轮询
>FinishRetrial|mysplayer,mycard|judge.who,judge.card|判定者,判定牌|local judge=data:toJudge()|改判轮询结束，时机触发者为判定者
>FinishJudge|mysplayer,mycard|judge.who,judge.card|判定者,判定牌|local judge=data:toJudge()|时机触发者判定结束
>PindianVerifying|mysplayer,mysplayer,mycard,mycard,mynum,mynum,mystr,mybool|pd.from,pd.to,pd.from_card,pd.to_card,pd.from_number,pd.to_number,pd.reason,pd.success|拼点发起者,被拼点者,拼点发起者的拼点牌,被拼点者的拼点牌,拼点发起者的点数,被拼点者的点数,拼点原因，通常是拼点技能名,拼点发起者是否赢了|local pd=data:toPindian();;data:setValue(pd);return false|时机触发者发起的拼点生效前
>Pindian|mysplayer,mysplayer,mycard,mycard,mynum,mynum,mystr,mybool|pd.from,pd.to,pd.from_card,pd.to_card,pd.from_number,pd.to_number,pd.reason,pd.success|拼点发起者,被拼点者,拼点发起者的拼点牌,被拼点者的拼点牌,拼点发起者的点数,被拼点者的点数,拼点原因，通常是拼点技能名,拼点发起者是否赢了|local pd=data:toPindian()|时机触发者发起的拼点生效后
>TurnedOver|||||时机触发者翻面后
>ChainStateChanged|||||时机触发者横置或重置后
>SlashEffect|mycard,mycard,mysplayer,mysplayer,mybool,mynum|effect.slash,effect.jink,effect.from,effect.to,effect.drank,effect.nature|使用的【杀】,使用的【闪】,【杀】的使用者,【杀】的目标,是否喝酒,属性|local effect=data:toSlashEffect()|时机触发者使用【杀】生效时，返回值为真将令【杀】失效
>SlashEffected|mycard,mycard,mysplayer,mysplayer,mybool,mynum|effect.slash,effect.jink,effect.from,effect.to,effect.drank,effect.nature|使用的【杀】,使用的【闪】,【杀】的使用者,【杀】的目标,是否喝酒,属性|local effect=data:toSlashEffect()|时机触发者受到【杀】的效果时，返回值为真将令【杀】失效
>SlashProceed|mycard,mycard,mysplayer,mysplayer,mybool,mynum|effect.slash,effect.jink,effect.from,effect.to,effect.drank,effect.nature|使用的【杀】,使用的【闪】,【杀】的使用者,【杀】的目标,是否喝酒,属性|local effect=data:toSlashEffect()|时机触发者使用【杀】生效后，比如强命系结算
>SlashHit|mycard,mycard,mysplayer,mysplayer,mybool,mynum|effect.slash,effect.jink,effect.from,effect.to,effect.drank,effect.nature|使用的【杀】,使用的【闪】,【杀】的使用者,【杀】的目标,是否喝酒,属性|local effect=data:toSlashEffect()|时机触发者使用【杀】未被【闪】抵消
>slashMissed|mycard,mycard,mysplayer,mysplayer,mybool,mynum|effect.slash,effect.jink,effect.from,effect.to,effect.drank,effect.nature|使用的【杀】,使用的【闪】,【杀】的使用者,【杀】的目标,是否喝酒,属性|local effect=data:toSlashEffect()|时机触发者使用【杀】被【闪】抵消
//>CardAsked
>CardResponded|mycard,mysplayer|resp.m_card,resp.m_who|打出的牌,打出目标|local resp=data:toResponsed()|时机触发者打出牌时
//>BeforeCardsMove
//>CardsMoving
>CardsMoveOneTime|mynumlist,mynumlist,mynum,myplayer,myplayer|mv.card_ids,mv.from_places,mv.to_places,mv.from,mv.to|牌的ID列表,牌的来源位置列表,牌的目标位置,牌的来源角色,牌的目标角色|local mv=data:toMoveOneTime()|牌移动时轮询所有角色，时机触发者为被询问者
//>CardDrawing
>CardUsed|mysplayer,mycard,mysplayerlist|use.from,use.card,use.to|牌的使用者,使用的牌,牌的使用对象列表|local use=data:toCardUse()|时机触发者使用牌时
//>TargetConfirming
//>TargetConfirmed
>CardEffected|mysplayer,mycard,mysplayer|effect.from,effect.card,effect.to|牌的使用者,使用的牌,牌的生效对象|local effect=data:toCardEffect()|时机触发者被使用牌生效时，返回值为真将令其无效，涉及【杀】时请使用SlashEffect系列时机
>CardFinished|mysplayer,mycard,mysplayerlist|use.from,use.card,use.to|牌的使用者,使用的牌,牌的使用对象列表|local use=data:toCardUse()|时机触发者使用牌结算完毕

//ConfirmDamage,    // confirm the damage's count and damage's nature
//Predamage,        // trigger the certain skill -- jueqing
//DamageForseen,    // the first event in a damage -- kuangfeng dawu
//DamageCaused,     // the moment for -- qianxi..
//DamageInflicted,  // the moment for -- tianxiang..
//PreHpReduced,     // the moment before Hpreduce
//DamageDone,       // it's time to do the damage
//Damage,           // the moment for -- lieren..
//Damaged,          // the moment for -- yiji..
//DamageComplete,

>Predamage|mysplayer,mysplayer,mycard,mynum,mynum|damage.from,damage.to,damage.card,damage.damage,damage.nature|伤害来源,受到伤害角色,造成伤害的牌,伤害点数,伤害属性|local damage=data:toDamage();;data:setValue(damage);return false|时机触发者将造成伤害时
>Damage|mysplayer,mysplayer,mycard,mynum,mynum|damage.from,damage.to,damage.card,damage.damage,damage.nature|伤害来源,受到伤害角色,造成伤害的牌,伤害点数,伤害属性|local damage=data:toDamage()|时机触发者造成伤害时
>Damaged|mysplayer,mysplayer,mycard,mynum,mynum|damage.from,damage.to,damage.card,damage.damage,damage.nature|伤害来源,受到伤害角色,造成伤害的牌,伤害点数,伤害属性|local damage=data:toDamage()|时机触发者受到伤害时


>Dying|mysplayer,mybool,mysplayer,mycard,mynum,mynum|dying.who,isDamaged,damageFrom,damageCard,damageNum,damageNature|濒死者,是否由伤害造成（否则为失去体力）,伤害来源（前提为伤害）,造成伤害的牌（前提为伤害）,伤害点数（前提为伤害）,伤害属性（前提为伤害）|local dying=data:toDying();local isDamaged=(dying.damage~=nil);local damageFrom,damageCard,damageNum,damageNature;if dying.damage then damageFrom,damageCard,damageNum,damageNature=dying.damage.from,dying.damage.card,dying.damage.damage,dying.damage.nature end|一名角色濒死时轮询，时机在求桃之前，时机触发者为被询问者，返回值为真将中止继续轮询，涉及濒死伤害时请先判断是否由伤害造成（否则为体力流失）
>AskForPeaches|mysplayer,mybool,mysplayer,mycard,mynum,mynum|dying.who,isDamaged,damageFrom,damageCard,damageNum,damageNature|濒死者,是否由伤害造成（否则为失去体力）,伤害来源（前提为伤害）,造成伤害的牌（前提为伤害）,伤害点数（前提为伤害）,伤害属性（前提为伤害）|local dying=data:toDying();local isDamaged=(dying.damage~=nil);local damageFrom,damageCard,damageNum,damageNature;if dying.damage then damageFrom,damageCard,damageNum,damageNature=dying.damage.from,dying.damage.card,dying.damage.damage,dying.damage.nature end|存活角色轮询求桃，时机触发者为被询问者，涉及濒死伤害时请先判断是否由伤害造成（否则为体力流失）
>AskForPeachesDone|mysplayer,mybool,mysplayer,mycard,mynum,mynum|dying.who,isDamaged,damageFrom,damageCard,damageNum,damageNature|濒死者,是否由伤害造成（否则为失去体力）,伤害来源（前提为伤害）,造成伤害的牌（前提为伤害）,伤害点数（前提为伤害）,伤害属性（前提为伤害）|local dying=data:toDying();local isDamaged=(dying.damage~=nil);local damageFrom,damageCard,damageNum,damageNature;if dying.damage then damageFrom,damageCard,damageNum,damageNature=dying.damage.from,dying.damage.card,dying.damage.damage,dying.damage.nature end|存活角色轮询求桃结束，时机触发者为求桃者，涉及濒死伤害时请先判断是否由伤害造成（否则为体力流失）
>Death|mysplayer,mybool,mysplayer,mycard,mynum,mynum|death.who,isDamaged,damageFrom,damageCard,damageNum,damageNature|死亡角色,是否由伤害造成（否则为失去体力）,伤害来源（前提为伤害）,造成伤害的牌（前提为伤害）,伤害点数（前提为伤害）,伤害属性（前提为伤害）|local death=data:toDeath();local isDamaged=(death.damage~=nil);local damageFrom,damageCard,damageNum,damageNature;if death.damage then damageFrom,damageCard,damageNum,damageNature=death.damage.from,death.damage.card,death.damage.damage,death.damage.nature end|一名角色死亡时，对于死亡者和存活角色轮询，时机触发者为被询问者，涉及濒死伤害时请先判断是否由伤害造成（否则为体力流失）
//>BuryVictim
//>BeforeGameOverJudge
//>GameOverJudge
//>GameFinished
